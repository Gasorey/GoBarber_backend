import { QuerySearch } from '@henry781/querysearch';
import { CollectionAggregationOptions, CollectionInsertManyOptions, CollectionInsertOneOptions, Db, DeleteWriteOpResultObject, FindOneOptions, InsertOneWriteOpResult, InsertWriteOpResult, MongoClientOptions, MongoCountPreferences, ReplaceOneOptions, ReplaceWriteOpResult, UpdateManyOptions, UpdateOneOptions, UpdateWriteOpResult } from 'mongodb';
import { Logger } from 'pino';
export interface MongoIsMasterResult {
    ismaster: boolean;
    readOnly: boolean;
    ok: number;
}
export declare class MongoService {
    static getCollectionForType(type: any): string;
    static getCollection(obj: any): string;
    private logger;
    private client;
    private error;
    private _db;
    get db(): Db;
    constructor(logger: Logger);
    connect(options?: MongoOptions): Promise<void>;
    doAction<T>(action: () => T): T;
    isMaster(): Promise<MongoIsMasterResult>;
    findOne<T>(type: any, query?: object, options?: FindOneOptions): Promise<T>;
    insertOne(obj: any, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult<any>>;
    insertMany(type: any, obj: any, options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult<any>>;
    find<T>(type: any, query?: object, sort?: object, limit?: number, offset?: number): Promise<T[]>;
    aggregate<T>(type: any, pipeline?: object[], options?: CollectionAggregationOptions, outputType?: any): Promise<T[]>;
    search<T>(type: any, search: QuerySearch): Promise<T[]>;
    deleteOne(type: any, query?: object): Promise<DeleteWriteOpResultObject>;
    deleteMany(type: any, query?: object): Promise<DeleteWriteOpResultObject>;
    replaceOne(type: any, query?: object, obj?: object, options?: ReplaceOneOptions): Promise<ReplaceWriteOpResult>;
    updateOne(type: any, query?: object, update?: object, options?: UpdateOneOptions): Promise<UpdateWriteOpResult>;
    updateMany(type: any, query?: object, update?: object, options?: UpdateManyOptions): Promise<UpdateWriteOpResult>;
    count(type: any, query?: object, options?: MongoCountPreferences): Promise<number>;
    close(): Promise<void>;
}
export declare const DEFAULT_MONGO_OPTIONS: MongoOptions;
export interface MongoOptions {
    uri?: string;
    dbName?: string;
    client?: MongoClientOptions;
}
