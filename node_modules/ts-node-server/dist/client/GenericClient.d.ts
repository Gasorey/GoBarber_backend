import * as _request from 'request';
import { CoreOptions } from 'request';
import { Principal } from '../auth/Principal';
export declare class GenericClient {
    protected request: _request.RequestAPI<_request.Request, _request.CoreOptions, _request.RequiredUriUrl>;
    constructor();
    get<T>(uri: string, options: RequestOptions<T>): Promise<T>;
    post<T>(uri: string, options: RequestOptions<T>): Promise<T>;
    delete<T>(uri: string, options: RequestOptions<T>): Promise<T>;
    put<T>(uri: string, options: RequestOptions<T>): Promise<T>;
    patch<T>(uri: string, options: RequestOptions<T>): Promise<T>;
    http<T>(uri: string, options: RequestOptions<T>, method: string): Promise<T>;
    protected buildHttpOptions<T>(options: RequestOptions<T>, method: string): CoreOptions;
}
declare type converter = (obj: any) => any;
export interface RequestOptions<T> {
    principal?: Principal;
    token?: string;
    httpOptions?: CoreOptions;
    serializer?: boolean | converter;
    deserializer?: boolean | converter;
    body?: any;
    expectedStatus?: number;
    deserializeType?: any;
}
export declare const genericClient: GenericClient;
export {};
