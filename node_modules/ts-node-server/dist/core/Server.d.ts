import { ServerOptions as FastifyServerOptions } from 'fastify';
import { Container } from 'inversify';
import { AdminOptions } from '../admin/AdminController';
import { BasicAuthProviderOptions, JwtAuthProviderOptions } from '../auth/api';
import { MongoOptions } from '../mongo/api';
import { OpenApiConf } from '../plugins/api';
import { Instance } from '../types';
export declare class Server {
    get instance(): Instance;
    private _instance;
    constructor(options: ServerOptions);
    buildInstance(options: ServerOptions): void;
    listen(port?: number): Promise<string>;
}
export interface ServerOptions extends FastifyServerOptions {
    container: Container;
    metrics?: boolean | string;
    admin?: boolean | AdminOptions;
    healthcheck?: boolean;
    swagger?: boolean | OpenApiConf;
    mongo?: boolean | MongoOptions;
    auth?: {
        jwt?: boolean | JwtAuthProviderOptions;
        basic?: boolean | BasicAuthProviderOptions;
    };
}
