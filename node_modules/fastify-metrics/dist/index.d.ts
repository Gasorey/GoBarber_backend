/// <reference types="node" />

import { FastifyInstance } from 'fastify';
import * as http from 'http';
import { LabelValues } from 'prom-client';
import { PluginOptions, FastifyMetrics } from './plugin';
declare module 'fastify' {
    interface FastifyInstance<HttpServer = http.Server, HttpRequest = http.IncomingMessage, HttpResponse = http.ServerResponse> {
        /**
         * Metrics interface
         */
        metrics: FastifyMetrics;
    }
    interface RouteSchema {
        /**
         * Hides metric route from swagger/openapi documentation
         */
        hide?: boolean;
    }
    interface FastifyRequest<HttpRequest, Query, Params, Headers, Body> {
        metrics?: {
            /**
             * Request duration histogram
             * @param labels metric labels
             */
            hist: (labels?: LabelValues<string>) => void;
            /**
             * Request duration summary by quantiles
             * @param labels metric labels
             */
            sum: (labels?: LabelValues<string>) => void;
        };
    }
}
declare const _default: (instance: FastifyInstance<http.Server, http.IncomingMessage, http.ServerResponse>, options: PluginOptions, callback: (err?: import("fastify").FastifyError | undefined) => void) => void;
export = _default;
//# sourceMappingURL=index.d.ts.map